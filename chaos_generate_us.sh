#!/bin/bash
curr=`pwd -P`
outdir=$curr
startdir=$1
pname="UnitServer"

exename=`basename $0`
lista_cu=();

lista_driver=();
lista_driver_ns=();
lista_h=();
lista_hd=();
lista_lib=""
while getopts i:o:n:h opt; do
    case $opt in
	i) startdir=$OPTARG
	    ;;
	o) outdir=$OPTARG
	    ;;
	n) pname=$OPTARG
	    ;;
	h) echo "Usage : $exename [-i <input directory>] [-o <output directory>] [-n <project name>]"
	    exit 0
	    ;;
    esac
   
done
if ! [[ "$outdir" =~ ^/ ]] ; then
    outdir=$curr/$outdir
    
fi
if [ ! -d "$startdir" ]; then
    echo "## directory not found $startdir"
    exit 1
fi
pushd $startdir > /dev/null
listacpp=`find . -name "*.cpp"`;
listah=`find . -name "*.h"`;
project_dir=$outdir/$pname
echo "* creating $project_dir"
mkdir -p $project_dir
parent=`dirname $startdir`
prefix=`basename $startdir`
incdir_list=""
if [ "$parent" != "." ]; then
    
    prefix="$(basename $parent)\/$prefix"
fi
for c in $listah; do

    header=`echo $c | sed 's/src\///' | sed 's/source\///' | sed "s/\.\//$prefix\//g"`;
    filenamespace=""
    nameget=`egrep "namespace\ +\w+\ *\{" $c`;
    namespace=`echo $nameget|sed "s/namespace\W\+\(\w\+\)\W*{/\1/g"`;

    for n in $namespace; do
	if [ -z "$filenamespace" ];then
	    filenamespace="$n";
	else
	    filenamespace="$filenamespace::$n";
	fi
    done;
    if [ -n "$filenamespace" ];then
	filenamespace="::$filenamespace"
    fi
    plugin=`grep ADD_CU_DRIVER_PLUGIN_SUPERCLASS $c -s`;
    if [ -n "$plugin" ]; then
	if [[ "$plugin" =~ class\ +(.+)\: ]]; then
	    
	    lista_driver+=("${BASH_REMATCH[1]}");
	    lista_driver_ns+=("$filenamespace");
	    lista_hd+=("$header");
	fi
    fi
    if [ -n "$filenamespace" ];then
	filenamespace="$filenamespace::"
    fi
    cu=`grep -s PUBLISHABLE_CONTROL_UNIT_INTERFACE $c | sed 's/[a-zA-Z]\+:://g'|sed "s/PUBLISHABLE_CONTROL_UNIT_INTERFACE(\(\w\+\))$/REGISTER_CU($filenamespace\1)/g"`;
    if [ -n "$cu" ]; then

	lista_cu+=("$cu");
	lista_h+=("$header");
    fi
done
# for c in $listacpp; do

#     drv=`grep -s REGISTER_PLUGIN\( $c | sed s/REGISTER_PLUGIN\(/REGISTER_DRIVER\(/`;
#     rr=`basename $startdir`


#     if [ -n "$drv" ]; then
# 	lista_driver+=("$drv");
# 	lista_h+=("$header");
#     fi
# done;

listcmake=`find . -name "CMakeLists.txt"`;
listadep=""
for c in $listcmake;do
    varl=`grep -i add_library $c | grep SHARED`;
    incdir=`dirname $startdir/$c | sed 's/\.\///g'`
    parent=`dirname $incdir`
    path=`basename $parent`/`basename $incdir`
    incdir_list="$incdir_list \${CHAOS_PREFIX}/include/$path"
    for var in $varl; do
	if [ -n "$var" ]; then
	    if [[ "$var" =~ .+\((.+) ]];then
		if [ -n "${BASH_REMATCH[1]}" ];then
		    mylib=${BASH_REMATCH[1]}
		    lista_lib="$lista_lib $mylib";
		    varlink=`grep -i "target_link_libraries\ *(\ *$mylib" $c | tail -1`;
		    patt="\($mylib\ +(.+)\ *\)"
		    if [[ "$varlink" =~ $patt ]]; then
			if [ -z "$listadep" ]; then
			    listadep="${BASH_REMATCH[1]}";
			else
			    listadep="$listadep ${BASH_REMATCH[1]}";
			fi

						
		    fi
		fi
	    fi
	fi;
    done;
done;

echo -e "// Project $pname" > $project_dir/main.cpp
echo -e "// includes the available CU in \"$prefix\"" >> $project_dir/main.cpp
echo -e "// generated by \"$exename\"\n\n" >> $project_dir/main.cpp
echo -e "#include <chaos/common/chaos_constants.h>\n#include <chaos/cu_toolkit/ChaosCUToolkit.h>\n#include <chaos/common/exception/CException.h>\n" >> $project_dir/main.cpp

echo -e "/*** CU Types ****/\n">>$project_dir/main.cpp
for h in ${lista_h[@]};do
    
    echo "#include<$h>" >> $project_dir/main.cpp
done
echo -e "/*** Drivers ****/\n">>$project_dir/main.cpp
for h in ${lista_hd[@]};do
    
    echo "#include<$h>" >> $project_dir/main.cpp
done
lista_unica=`echo -e $listadep| sed 's/ /\n/g'|sort -n|uniq|tr '\n' ' '`

echo -e "\n\nint main(int argc,char**argv){">>$project_dir/main.cpp
echo -e "\ttry{\n">>$project_dir/main.cpp
echo -e "\t\tchaos::cu::ChaosCUToolkit::getInstance()->init(argc, argv);">>$project_dir/main.cpp
arr=0
for c in ${lista_cu[@]}; do
    echo -e "\t\t$c; /* file: ${lista_h[$arr]} */" >> $project_dir/main.cpp
    ((arr++))
done
arr=0
for c in ${lista_driver[@]}; do
    
    echo -e "\t\tMATERIALIZE_INSTANCE_AND_INSPECTOR_WITH_NS(${lista_driver_ns[arr]},$c); /* file: ${lista_hd[$arr]} */" >> $project_dir/main.cpp
  ((arr++))
done
echo -e "\t\tchaos::cu::ChaosCUToolkit::getInstance()->start();" >> $project_dir/main.cpp

echo -e "\t} catch (CException& e) {\n\t\tstd::cerr<<\"Exception:\"<<std::endl;\n\t\tstd::cerr<< \"domain	:\"<<e.errorDomain << std::endl;\n\t\tstd::cerr<< \"cause	:\"<<e.errorMessage << std::endl;\n\t} catch (program_options::error &e){\n\t\tstd::cerr << "\"Unable to parse command line: \"" << e.what() << std::endl;\n\t} catch (...){\n\t\tstd::cerr << \"unexpected exception caught.. \" << std::endl;\n\t}\n}\n" >> $project_dir/main.cpp

echo "cmake_minimum_required(VERSION 2.6)" > $project_dir/CMakeLists.txt
echo "include(\$ENV{CHAOS_BUNDLE}/tools/project_template/CMakeChaos.txt)" >>  $project_dir/CMakeLists.txt
echo "SET(src main.cpp )" >>  $project_dir/CMakeLists.txt

if [ -n "$incdir_list" ]; then
    echo "INCLUDE_DIRECTORIES(\${CMAKE_INCLUDE_PATH} $incdir_list)" >> $project_dir/CMakeLists.txt
fi
echo "ADD_EXECUTABLE($pname \${src})" >>  $project_dir/CMakeLists.txt
echo "TARGET_LINK_LIBRARIES($pname $lista_lib $lista_unica)" >>  $project_dir/CMakeLists.txt
echo "INSTALL_TARGETS(/bin $pname)" >>  $project_dir/CMakeLists.txt

popd > /dev/null
