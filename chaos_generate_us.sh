#!/bin/bash
curr=`pwd -P`
startdir=$1
pushd $startdir > /dev/null

listacpp=`find . -name "*.cpp"`;
lista_cu=();

lista_driver=();
lista_h=();
list_lib=()
for c in $listacpp; do
    cu=`grep PUBLISHABLE_CONTROL_UNIT_IMPLEMENTATION $c | sed s/PUBLISHABLE_CONTROL_UNIT_IMPLEMENTATION/REGISTER_CU/`;
    drv=`grep REGISTER_PLUGIN\( $c | sed s/REGISTER_PLUGIN\(/REGISTER_DRIVER\(/`;
    rr=`basename $startdir`
    header=`echo $c | sed "s/\.cpp/\.h/" | sed 's/\/src//' | sed 's/\/source//' | sed s/\./$rr/`;

    if [ -n "$cu" ]; then
	lista_cu+=("$cu");
	lista_h+=("$header");

    fi
    if [ -n "$drv" ]; then
	lista_driver+=("$drv");
	lista_h+=("$header");
    fi
done;

listcmake=`find . -name "CMakeLists.txt"`;
for c in $listcmake;do
    var=`grep -i add_library $c`;
    if [ -n "$var" ]; then
	if [[ $var=~'\((\\w+)\\s' ]];then
	    if [ -n "${BASH_REMATCH[1]}" ];then
		list_lib+=("${BASH_REMATCH[1]}");
	    fi
	fi
    fi;
done;

echo -e "// generated by $0\n\n" > $curr/main.cpp

for h in ${lista_h[@]};do
    
    echo "#include<$h>" >> $curr/main.cpp
done

echo -e "\n\nint main(int argc,char**argv){">>$curr/main.cpp
echo -e "\ttry{\n">>$curr/main.cpp
echo -e "\t\tChaosCUToolkit::getInstance()->init(argc, argv);">>$curr/main.cpp
for c in ${lista_cu[@]}; do
    echo -e "\t\t$c;" >> $curr/main.cpp
done
for c in ${lista_driver[@]}; do
    echo -e "\t\t$c;" >> $curr/main.cpp
done
echo -e "\t}}\n\n" >> $curr/main.cpp
popd > /dev/null
