cmake_policy(VERSION 2.8)
cmake_minimum_required(VERSION 2.8)
cmake_policy(SET CMP0011 NEW)
option(BUILD_FORCE_32 "Set to ON to enable 32 bit compilation" OFF)
option(BUILD_FORCE_STATIC "Set static compilation" OFF)


IF( ( DEFINED ENV{CHAOS32}) OR BUILD_FORCE_32 )
    MESSAGE(STATUS "Enabling 32 bit Compilation")
    set (BUILD_FORCE_32 1)
    set (CMAKE_C_FLAGS "-m32")
    set (CMAKE_CXX_FLAGS "-m32")
    set (CMAKE_LINK_FLAGS "-m32")
ENDIF()
if( DEFINED ENV{CHAOS_BUNDLE} )
    MESSAGE(STATUS "Using $ENV{CHAOS_BUNDLE}")
    set (PROJECT_SOURCE_DIR $ENV{CHAOS_BUNDLE})
ELSE()
    MESSAGE(FATAL_ERROR "Please set CHAOS_BUNDLE environment")
ENDIF()

 IF(CHAOS_C_COMPILER)
 	MESSAGE(STATUS "Setting C compiler ${CHAOS_C_COMPILER}")
 	SET(CMAKE_C_COMPILER ${CHAOS_C_COMPILER})
 ENDIF()

 IF(CHAOS_CC_COMPILER)
 	MESSAGE(STATUS "Setting CC compiler ${CHAOS_CC_COMPILER}")
 	SET(CMAKE_CXX_COMPILER ${CHAOS_CC_COMPILER})
 ENDIF()

ADD_DEFINITIONS(-g -O2)
if( DEBUG OR DEFINED ENV{CHAOS_DEVELOPMENT} )
    MESSAGE(STATUS "Enabling DEBUG MACRO")
    ADD_DEFINITIONS(-DDEBUG)
ENDIF()

set(FrameworkLib $ENV{CHAOS_LINK_LIBRARY})
separate_arguments(FrameworkLib)

IF( (DEFINED ENV{CHAOS_STATIC}) OR BUILD_FORCE_STATIC )
	MESSAGE(STATUS "Enabling Static compilation")
	SET(BUILD_FORCE_STATIC 1)
	ADD_DEFINITIONS(-DCHAOS_STATIC)
	SET(CMAKE_FIND_LIBRARY_SUFFIXES ".a")
	SET(CMAKE_EXE_LINKER_FLAGS "-static")
	SET(BUILD_SHARED_LIBRARIES OFF)
	SET(CMAKE_SHARED_LIBRARY_LINK_C_FLAGS)
	SET(CMAKE_SHARED_LIBRARY_LINK_CC_FLAGS)

ELSE()
	add_definitions(-DBOOST_ALL_DYN_LINK)
ENDIF()

IF ( DEFINED ENV{CHAOS_PREFIX} )
   IF ( NOT ${CMAKE_INSTALL_PREFIX} MATCHES $ENV{CHAOS_PREFIX})
      set(CMAKE_INSTALL_PREFIX $ENV{CHAOS_PREFIX})	
      MESSAGE(STATUS "Setting Install Dir to CHAOS_PREFIX ${CMAKE_INSTALL_PREFIX}")
    ENDIF()
ENDIF()

IF ( NOT DEFINED CMAKE_INSTALL_PREFIX )
   set(CMAKE_INSTALL_PREFIX ${PROJECT_SOURCE_DIR}/usr/local)
   MESSAGE(STATUS "Setting Install Dir ${CMAKE_INSTALL_PREFIX}")
ENDIF()

set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/build)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/build)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${CMAKE_BINARY_DIR}/build)

INCLUDE_DIRECTORIES(. ../.. ${CMAKE_INSTALL_PREFIX}/include)
LINK_DIRECTORIES(${CMAKE_BINARY_DIR}/build ${CMAKE_INSTALL_PREFIX}/lib)

string (REGEX MATCH "[a-zA-Z_\\.]+/[a-zA-Z_\\.]+$" PROJECT_OUT_H  ${CMAKE_CURRENT_SOURCE_DIR})

foreach(cu ${CHAOS_CUS})
string (REPLACE ".cpp" ".h" cuh ${cu})

MESSAGE(STATUS "CU defined ${cu}")
IF (DEFINED CU_H)
SET(CU_H ${CU_H} ${cuh})
ELSE()
SET(CU_H ${cuh})
ENDIF()  
IF (DEFINED CU_H)
  INSTALL(FILES ${CU_H} DESTINATION ${CMAKE_INSTALL_PREFIX}/include/${PROJECT_OUT_H})
ENDIF()
ENDFOREACH()

IF (NOT DEFINED CHAOS_INSTALL_DIRS)
   SET(CHAOS_INSTALL_DIRS core models)
ENDIF()

foreach( dir ${CHAOS_INSTALL_DIRS})

IF (EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/${dir})
   FILE(GLOB core_src ${dir}/*.h)
   INSTALL(FILES ${core_src} DESTINATION include/${PROJECT_OUT_H}/${dir})
   MESSAGE(STATUS "${dir} directory exists")
ENDIF()
ENDFOREACH()

IF (DEFINED PROJECT_NAME)
   FILE(GLOB conf_src conf/*)
   FILE(GLOB perf_src perf/*)
   INSTALL(FILES ${conf_src} ${perf_src} DESTINATION etc/${PROJECT_NAME})
ENDIF()
